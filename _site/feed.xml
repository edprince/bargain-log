<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Hunting for archaeological bargains</title>
    <description>Weekly blog updating on progress in relation to the robot bargain hunt project set for this terms ALL.
</description>
    <link>http://yourdomain.com/bargain-log//</link>
    <atom:link href="http://yourdomain.com/bargain-log//feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Sun, 13 Mar 2016 01:05:11 +0000</pubDate>
    <lastBuildDate>Sun, 13 Mar 2016 01:05:11 +0000</lastBuildDate>
    <generator>Jekyll v2.5.3</generator>
    
      <item>
        <title>Rounding off</title>
        <description>&lt;p&gt;Coming to the end of the project, we have done our presentation, received
feedback on usability and touched up. We have improved a few things, including
the bug that was stopping the items from displaying in the inventory correctly.&lt;/p&gt;

&lt;h1 id=&quot;individual-feature&quot;&gt;Individual Feature&lt;/h1&gt;

&lt;p&gt;I have added an extra feature that tracks all the robots movements, displays on
the map where it has been, and calculates what percentage of the map has been
covered.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/cxH6P2q.png&quot; alt=&quot;Traced-map&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In order to calculate the percentage of the map covered, I wrote the following
function:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;calculate_percentage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;covered&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;totalW&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;totalH&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;sd&quot;&gt;&amp;#39;&amp;#39;&amp;#39;Function calculate how much of map is visited&lt;/span&gt;
&lt;span class=&quot;sd&quot;&gt;    Takes 2 lists and compares to see how much of the ground has been visited&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;uniqueTiles&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;totalW&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;totalH&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;covered&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;uniqueTiles&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;uniqueTiles&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;totalW&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;totalH&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&quot;evaluation-of-the-project&quot;&gt;Evaluation of the project&lt;/h3&gt;

&lt;p&gt;Overall I think the project has been mixed with regards to it’s success, there
are some things I feel have worked very well, and other aspects that can without
doubt be chalked down to experience.&lt;/p&gt;

&lt;p&gt;The first successful area of this project has been its management, and use of
software to keep everybody up to date with progress.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://quickfixes.github.io/just-gittin-started/img/octocat.png&quot; alt=&quot;Github octocat&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The place to begin is with the most important management tool of the lot - GitHub.
It has been vital for the progress and success of this project, that we successfully 
used a version control system. GitHub has been magnificent, and although confusing for
some members of the team who had never used it before, proved invaluable right the way
to the end. We were able to commit code, revert to earlier builds, use branches for individual
features, raise issues, assign tasks, view each others work, and integrate other software.&lt;/p&gt;

&lt;p&gt;Other such software included Travis CI.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://workablehr.s3.amazonaws.com/uploads/account/logo/11901/large_Mascot-fullcolor-png.png&quot; alt=&quot;Travis CI logo&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Although for this project, it was largely irrelevant, Travis was a really cool
service to successfully employ, more as an investment for future projects. With
Travis CI, I was able to write unit tests that could test functions, and every
time any code was commited, it would run the tests to make sure the functions
were still being run correctly, if not, it would fail the build, alert me via
email, and change the badge on the repository readme to ‘build: failing’.&lt;/p&gt;

&lt;p&gt;Lastly, I feel the presentation was done well, and possibly the first time the
group really pulled together a bit more. I think future projects will require
far more communication, better delegation of work to individuals, and a more in
depth analysis at the start, with a stronger focus on design. As a process, it
has been fantastic, and very, very rewarding, seeing a project come from pen and
paper, to a real product. And that’s it from me for this project.&lt;/p&gt;

&lt;p&gt;Follow me on Twitter and GitHub to keep up to date with my work, and to see more
blogs on future projects.&lt;/p&gt;

</description>
        <pubDate>Thu, 10 Mar 2016 23:13:05 +0000</pubDate>
        <link>http://yourdomain.com/bargain-log//jekyll/update/2016/03/10/rounding-off.html</link>
        <guid isPermaLink="true">http://yourdomain.com/bargain-log//jekyll/update/2016/03/10/rounding-off.html</guid>
        
        
        <category>jekyll</category>
        
        <category>update</category>
        
      </item>
    
      <item>
        <title>Improving the Map</title>
        <description>&lt;p&gt;Today I have been working on the map. I have added a few extra tiles, a bush, a
rock and water tiles. Unlike before, the objects in the game now spawn randomly
instead of in a pre-defined location. As well as this, the map is generated
randomly but not without a tiny bit of intelligence to make it slightly more
realistic. Originally I was generating the items by simply moving over each
tile, and attempting a probability based condition that was not likely, this
would determine whether to add an asset on that space. Instead, now it takes
into account the items around it, and creates a higher chance of spawning if
there are more of its own tiles around. This now creates lumps of rock,
pools/lakes and vegetation patches, instead of it all being totally randomly
spewed out.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/K1MujZ9.png&quot; alt=&quot;Map&quot; /&gt;
&lt;img src=&quot;http://i.imgur.com/gEPxUmR.png&quot; alt=&quot;Map&quot; /&gt;
&lt;img src=&quot;http://i.imgur.com/82y3SeR.png&quot; alt=&quot;Map&quot; /&gt;
&lt;img src=&quot;http://i.imgur.com/7J4X2aO.png&quot; alt=&quot;Map&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;those-funky-blue-lines&quot;&gt;Those Funky Blue Lines?&lt;/h1&gt;

&lt;p&gt;So I added the blue lines in, as more of a human aid, to help identify where the
objects are in the map, as sometimes they are reasonably hard to identify,
especially when the robot is going fast.&lt;/p&gt;

</description>
        <pubDate>Thu, 03 Mar 2016 03:05:05 +0000</pubDate>
        <link>http://yourdomain.com/bargain-log//jekyll/update/2016/03/03/maps.html</link>
        <guid isPermaLink="true">http://yourdomain.com/bargain-log//jekyll/update/2016/03/03/maps.html</guid>
        
        
        <category>jekyll</category>
        
        <category>update</category>
        
      </item>
    
      <item>
        <title>Framerate issues and timer</title>
        <description>&lt;p&gt;Today I have been working on fixing the incredibly slow framerate. After some
research, we discovered that using DOUBLEBUF as a flag for the
&lt;code&gt;display.set_mode()&lt;/code&gt; improves this slightly, but still nowhere near the level we
wanted/needed. After some testing, and narrowing down, I found that it was the
&lt;code&gt;.fill()&lt;/code&gt; method being used that slowed the game down enormously. So I removed
this and used the &lt;code&gt;.blit()&lt;/code&gt; method, filling the screen with a tile instead. This
dramatically improved our frame rate to a level we were happy with.&lt;/p&gt;

&lt;p&gt;I was also working today on the timer for the project. The specifications state
that the user should be able to enter a time that counts down, meaning the robot
only has a set amount of time to collect items. This can be done very easily
with pygame, using it’s built-in &lt;code&gt;pygame.time.set_timer()&lt;/code&gt; method, allowing a
number of milliseconds to be specified before fulfilling a condition. From there
a function can be called to bring up the scoreboard.&lt;/p&gt;

</description>
        <pubDate>Mon, 22 Feb 2016 12:21:05 +0000</pubDate>
        <link>http://yourdomain.com/bargain-log//jekyll/update/2016/02/22/optimizing.html</link>
        <guid isPermaLink="true">http://yourdomain.com/bargain-log//jekyll/update/2016/02/22/optimizing.html</guid>
        
        
        <category>jekyll</category>
        
        <category>update</category>
        
      </item>
    
      <item>
        <title>Creating a prototype for the game</title>
        <description>&lt;p&gt;This week I have started work on a prototype version of the game. This is
involving a very simple, abstracted version of our final game. The prototype
generates 5 instances of different item objects, and displays them on the screen
at wherever their coordinate attributes state they should be. Currently each
item is only being represented by a blue circle. Then a player is generated, and
placed in the centre of the map. I then need to work on the automatic movement
algorithm that will allow the sprite to move efficiently from item to item.&lt;/p&gt;

&lt;h2 id=&quot;the-algorithm&quot;&gt;The Algorithm&lt;/h2&gt;
&lt;p&gt;The first idea I’ve had for the algorithm is a very simple concept. Essentially
the idea is to calculate the distance between the player and the item it is
searching for, and make a random movement (left, right, up, down). Then
calculate the distance once more and see if the sprite is moving in the correct
direction.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;calculate_distance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
  &lt;span class=&quot;c&quot;&gt;#Getting the absolute height and width values&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;width&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;math&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sqrt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;height&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;math&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sqrt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;math&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sqrt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;On a map with no obstacles, this would work, but our map will contain
tiles through which the sprites cannot pass through. This means more complex
algorithms will be needed in order to efficiently move the automatic sprite
around the screen.&lt;/p&gt;

</description>
        <pubDate>Tue, 09 Feb 2016 09:08:05 +0000</pubDate>
        <link>http://yourdomain.com/bargain-log//jekyll/update/2016/02/09/prototype.html</link>
        <guid isPermaLink="true">http://yourdomain.com/bargain-log//jekyll/update/2016/02/09/prototype.html</guid>
        
        
        <category>jekyll</category>
        
        <category>update</category>
        
      </item>
    
      <item>
        <title>Inventory</title>
        <description>&lt;p&gt;I have just been working on implementing an inventory system for the game,
allowing the player to see which items they have, and how many of each. This
involves looping over the game items dictionary and displaying each in turn
followed by a variable (representing quantity), in the Pygame window.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;n&quot;&gt;placePosition&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;game_items&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;DISPLAYSURF&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;blit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;game_items&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;placePosition&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MAPHEIGHT&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TILESIZE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;placePosition&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;40&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;textObj&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;INVFONT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;inventory&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]),&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;WHITE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BLACK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;DISPLAYSURF&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;blit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;textObj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;placePosition&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MAPHEIGHT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TILESIZE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;placePosition&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;60&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

</description>
        <pubDate>Wed, 03 Feb 2016 23:59:05 +0000</pubDate>
        <link>http://yourdomain.com/bargain-log//jekyll/update/2016/02/03/inventory.html</link>
        <guid isPermaLink="true">http://yourdomain.com/bargain-log//jekyll/update/2016/02/03/inventory.html</guid>
        
        
        <category>jekyll</category>
        
        <category>update</category>
        
      </item>
    
      <item>
        <title>Activity Diagram</title>
        <description>&lt;p&gt;This week I have been working on the activity diagram, defining an abstracted
version of the way that our game will work. This does not include the less
abstracted details within the game, but a far more general representation of the
way the elements all tie in together.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/MhQrHp3.png&quot; alt=&quot;Activity Diagram&quot; /&gt;&lt;/p&gt;

&lt;p&gt;On top of this we have also been working on some more assets for the game
including characters and keys. I have found using a free online editor called
Piskel to have been a great aid for creating pixel-style sprites and tiles for
this game.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://s-media-cache-ak0.pinimg.com/236x/a4/02/fb/a402fb118eb4ec661afd8920cbeaff10.jpg&quot; alt=&quot;8-bit Indy&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I felt that this style of character would fit the game we are designing well,
with enough familiarity to the popular explorer and adventurer: Indiana Jones.&lt;/p&gt;

&lt;h2 id=&quot;splitting-up-some-code&quot;&gt;Splitting up some code&lt;/h2&gt;
&lt;p&gt;Some time was spent this week going into code management for the project. A
&lt;code&gt;main.py&lt;/code&gt; file has been created, but instead of filling it up with functions and
classes, I decided to split those up into their own files, complete with
docstrings and comments explaining how they work. Then the main file simply
imports them and thus has access to all of their respective functions and
classes. This will make it much easier to read through the main file, identify
where errors are being created, and for another programmer to come and
read/understand.&lt;/p&gt;

&lt;h1 id=&quot;file-tree&quot;&gt;File Tree&lt;/h1&gt;

&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/FrGaD2P.png&quot; alt=&quot;File Tree&quot; /&gt;&lt;/p&gt;

</description>
        <pubDate>Mon, 01 Feb 2016 09:48:05 +0000</pubDate>
        <link>http://yourdomain.com/bargain-log//jekyll/update/2016/02/01/activity.html</link>
        <guid isPermaLink="true">http://yourdomain.com/bargain-log//jekyll/update/2016/02/01/activity.html</guid>
        
        
        <category>jekyll</category>
        
        <category>update</category>
        
      </item>
    
      <item>
        <title>Creating assets</title>
        <description>&lt;p&gt;This week so far I have been working on creating some assets for the game. We
have settled on the archaeological dig idea for the project, so I am able to
start doing some asset designs. I have a very basic 32x32 tileset to make the
map, and am now building up other assets for the game. I have created a cactus
object, that is generated in multiple random locations on the map using the TREE
DENSITY variable, declared at the top of the main file. They can however only be
generated if the tile on which it is being debated is SAND. This means they
cannot spawn in water/stone etc.&lt;/p&gt;

&lt;p&gt;I have also created a bone, and a coin asset, both of which should eventually be
able to be collected.&lt;/p&gt;

&lt;h2 id=&quot;sorting-algorithm&quot;&gt;Sorting algorithm&lt;/h2&gt;
&lt;p&gt;I have implemented a bubble sort algorithm in Python, ordering a list of numeric
values. Although this can be done using the &lt;code&gt;sorted()&lt;/code&gt; function in Python, I
felt it was worth implementing anyway. A difference to our sorting algorithm, is
that they potentially won’t just be sorting a single list of values, but instead
will be ordering objects in a list based on their value property.&lt;/p&gt;

&lt;h2 id=&quot;class-design&quot;&gt;Class design&lt;/h2&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;location&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;item_type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;quantity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;location&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;location&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;item_type&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;item_type&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;quantity&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;quantity&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This class is defined such that all instances are given the attributes: name,
value, location, item type and quantity. All of which are pretty self
explanatory. Using this, I have also written a function that can order any list
of objects, providing they have a &lt;code&gt;value&lt;/code&gt; attribute.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://workablehr.s3.amazonaws.com/uploads/account/logo/11901/large_Mascot-fullcolor-png.png&quot; alt=&quot;Travis CI logo&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This is where Travis CI comes in. Once I had written the function to sort a list
of objects, I could use that function to test with. Once I could assure that
this was working properly, I could use both the function in the main file, and
the function in the travis test to both sort the same list. If they return the
same result, then I know the other function is highly likely to be running
correctly. If however, somebody makes changes to the function and breaks it,
then the travis test file will raise an error, changing the project status on
Travis to ‘failing’, which will change the badge on the README on GitHub, as
well as alerting people on Gitter.&lt;/p&gt;

</description>
        <pubDate>Thu, 28 Jan 2016 23:59:05 +0000</pubDate>
        <link>http://yourdomain.com/bargain-log//jekyll/update/2016/01/28/assets.html</link>
        <guid isPermaLink="true">http://yourdomain.com/bargain-log//jekyll/update/2016/01/28/assets.html</guid>
        
        
        <category>jekyll</category>
        
        <category>update</category>
        
      </item>
    
      <item>
        <title>Dabbling with Pygame</title>
        <description>&lt;h2 id=&quot;pygame&quot;&gt;Pygame&lt;/h2&gt;
&lt;p&gt;This week I have started implementing some stuff with Pygame, mainly as a trial
run to see how viable it seems for this project.&lt;/p&gt;

&lt;p&gt;I have created a simple 2D tile-based map with simple textures to play around.
The map is using the following data format:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;nb&quot;&gt;map&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;So there are multiple lists within lists. Each sub list represents a row, and
the containing list represents the columns. The numbers represent the type of
tile, so for example in my work I had:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;n&quot;&gt;GRASS&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;  
&lt;span class=&quot;n&quot;&gt;STONE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;  
&lt;span class=&quot;n&quot;&gt;DIRT&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;  
&lt;span class=&quot;n&quot;&gt;WATER&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;  
&lt;span class=&quot;n&quot;&gt;SAND&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;  
&lt;span class=&quot;n&quot;&gt;etc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This meant each value in the map list corresponds to one of the tile types.&lt;/p&gt;

&lt;h1 id=&quot;map-parser&quot;&gt;Map Parser&lt;/h1&gt;
&lt;p&gt;Originally, I had the same list set up for creating the maps, but values being
the tile types, but shortly found this was taking far too long to efficiently
work with, so I decided to create the maps in a text file, with different
characters representing the different tiles, and then wrote a parser in Python
that would read the file and build the map list accordingly.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;parse_map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;sd&quot;&gt;&amp;#39;&amp;#39;&amp;#39;Parses map data into lists&lt;/span&gt;

&lt;span class=&quot;sd&quot;&gt;    Takes characters and if matching tile types, builds a list within a list of&lt;/span&gt;
&lt;span class=&quot;sd&quot;&gt;    entire map&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;tilemap_tmp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;line&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;line&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;#&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;tilemap_tmp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SAND&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;elif&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;line&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;~&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;tilemap_tmp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;WATER&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;elif&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;line&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;v&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;tilemap_tmp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SAND&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;elif&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;line&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;_&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;tilemap_tmp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GRASS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;elif&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;line&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;&amp;quot;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;tilemap_tmp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DIRT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;elif&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;line&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;=&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;tilemap_tmp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;WOOD&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;elif&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;line&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;/&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;tilemap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tilemap_tmp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tilemap_tmp&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;tilemap_tmp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/COsNT3x.png&quot; alt=&quot;Map&quot; /&gt;&lt;/p&gt;

</description>
        <pubDate>Mon, 25 Jan 2016 23:59:05 +0000</pubDate>
        <link>http://yourdomain.com/bargain-log//jekyll/update/2016/01/25/pygame.html</link>
        <guid isPermaLink="true">http://yourdomain.com/bargain-log//jekyll/update/2016/01/25/pygame.html</guid>
        
        
        <category>jekyll</category>
        
        <category>update</category>
        
      </item>
    
      <item>
        <title>Starting out</title>
        <description>&lt;p&gt;So we have just started the robot bargain hunt task, and I have a reasonable
outline of what the project is aiming for. We need to implement a searching and
sorting algorithm along with a GUI to create a program that locates bargains. To
begin with we have created a public git repository, hosted on GitHub, and all
tested pushing our own example work to it. Along with this we are also
communicating using Gitter, which is fantastic for integrating other
applications with, such as Trello, which we are using to create lists of
components that need to be implemented, ideas, deadlines etc. Along with this,
we are using Travis CI in order to make use of continuous integration. For any
functions/code we write, we can have unit tests and such to make sure they are
working, and also prevent the code from being broken in the future. All this
data is also delivered straight to Gitter making it easily visible for everyone
in the group.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://upload.wikimedia.org/wikipedia/en/2/2f/Gitter_logo.png&quot; alt=&quot;Gitter logo&quot; /&gt;
&lt;img src=&quot;https://workablehr.s3.amazonaws.com/uploads/account/logo/11901/large_Mascot-fullcolor-png.png&quot; alt=&quot;Travis CI logo&quot; /&gt;&lt;/p&gt;

</description>
        <pubDate>Mon, 18 Jan 2016 23:59:05 +0000</pubDate>
        <link>http://yourdomain.com/bargain-log//jekyll/update/2016/01/18/week1.html</link>
        <guid isPermaLink="true">http://yourdomain.com/bargain-log//jekyll/update/2016/01/18/week1.html</guid>
        
        
        <category>jekyll</category>
        
        <category>update</category>
        
      </item>
    
  </channel>
</rss>
